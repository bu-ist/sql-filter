#!/usr/bin/env python
# encoding: utf-8
"""
sql-filter.py

Exits cleanly if no filtering required
Exits with errno=1 if query was filtered
Exits with errno=2 if something else went wrong

"Tokens" are SQL tokens as generated by the sqlparse library. A token group
is comprised of several tokens, and a statement is made up of tokens and token
groups to make a complete or partial SQL statement.

This filter script can accept multiple statements.

Created by Niall Kavanagh on 3/20/2014
"""

from __future__ import print_function
import argparse
import os
import sys
import sqlfilter


def main():
    # command line args
    parser = argparse.ArgumentParser(description='Filters blacklisted \
                                     functions and keywords from a SQL \
                                     query.')

    parser.add_argument('filename', help='the filename containing the SQL \
                        query')

    parser.add_argument('--blacklist', default='blacklist.txt',
                        help='the filename contain a list of \
                        blacklisted functions and keywords')

    args = parser.parse_args()

    if not os.path.isfile(args.filename):
        print('File not found: {0}'.format(args.filename),
              file=sys.stderr)
        sys.exit(2)

    if not os.path.isfile(args.blacklist):
        print('Blacklist not found: {0}'.format(args.blacklist),
              file=sys.stderr)
        sys.exit(2)

    # load the blacklist
    blacklisted_tokens = []
    with open(args.blacklist) as f:
        blacklisted_tokens = f.read().splitlines()

    # parse the SQL
    original_sql = ''
    with open(args.filename, 'r') as sql_file:
        original_sql = sql_file.read()

    filtered_sql = sqlfilter.filter_sql(original_sql, blacklisted_tokens)

    print('Original: {0}\n'.format(original_sql))

    # normal exit, no filtering peformed
    errno = 0

    if filtered_sql != original_sql:
        # abnormal exit, sql was filtered
        print('Filtered: {0}\n'.format(filtered_sql))
        errno = 1

    sys.exit(errno)

if __name__ == '__main__':
    main()
